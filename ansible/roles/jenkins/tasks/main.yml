---
# Variable setup.
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

# Setup/install tasks.
- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

# Configure Jenkins init settings.
- include_tasks: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  uri:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
    method: GET
    return_content: "yes"
    timeout: 5
    body_format: raw
    follow_redirects: "no"
    status_code: 200,403
  register: result
  until: (result.status == 403 or result.status == 200) and (result.content.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

# Update Jenkins and install configured plugins.
- include_tasks: plugins.yml

- name: Wait for Jenkins to stop
  wait_for:
    timeout: 25

- name: Jenkins is stopped
  service:
    name: jenkins
    state: stopped
  changed_when: false

- name: Wait for Jenkins to stop
  wait_for:
    timeout: 10

- name: Copy jenkins.yaml
  copy:
    src: "{{ jenkins_source_dir_configs }}/jenkins.yaml"
    dest: "{{ jenkins_home }}/jenkins.yaml"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0644

- name: Job directories are present
  file:
    path: "{{ jenkins_home }}/jobs/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
  with_items: "{{ jenkins_jobs }}"

- name: Jobs are present
  copy:
    src: "{{ jenkins_source_dir_jobs }}/{{ item }}/config.xml"
    dest: "{{ jenkins_home }}/jobs/{{ item }}/config.xml"
    mode: 0644
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
  with_items: "{{ jenkins_jobs }}"

- name: Create jenkins.service.d directory
  file:
    path: "/etc/systemd/system/jenkins.service.d/"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy jenkins.service drop-in
  template:
    src: "jenkins_override.j2"
    dest: /etc/systemd/system/jenkins.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: Copy disable-script-security
  template:
    src: "disable-script-security.groovy.j2"
    dest: "{{ jenkins_home }}/init.groovy.d/disable-script-security.groovy"
    owner: root
    group: root
    mode: 0644

- name: systemctl daemon-reload
  shell: systemctl daemon-reload

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present

- name: Add jenkins user to docker group
  user:
    name: jenkins
    groups: docker
    append: yes

- name: Bin jenkins directory are present
  file:
    path: "{{ jenkins_home }}/bin/"
    state: directory
    mode: 0755
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"

- name: Download trdl (for werf)
  get_url:
    url: https://tuf.trdl.dev/targets/releases/0.4.1/linux-amd64/bin/trdl
    dest: "{{ jenkins_home }}/bin/trdl"
    mode: 0755
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"

- name: Copy jenkins sudo
  template:
    src: "sudo.j2"
    dest: "/etc/sudoers.d/jenkins"
    owner: root
    group: root
    mode: 0440

- name: Copy jenkins config files
  copy:
    src: "{{ jenkins_source_dir_configs }}/{{ item }}"
    dest: "{{ jenkins_home }}/{{ item }}"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0644
  with_items: "{{ jenkins_config_files }}"
  notify: restart jenkins
